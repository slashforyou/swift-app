/**
 * StaffCrewScreen - Gestion du personnel et des équipes
 * Gère les employés TFN et les prestataires ABN (contenu seulement, header géré par Business.tsx)
 */
import React, { useState } from 'react'
import { ScrollView, StyleSheet, Text, TouchableOpacity, View, ActivityIndicator } from 'react-native'

// Components
import InviteEmployeeModal from '../../components/business/modals/InviteEmployeeModal'
import AddContractorModal from '../../components/business/modals/AddContractorModal'
import { HStack, VStack } from '../../components/primitives/Stack'
import { Card } from '../../components/ui/Card'

// Hooks & Utils
import { DESIGN_TOKENS, useCommonThemedStyles } from '../../constants/Styles'
import { useTheme } from '../../context/ThemeProvider'
import { useLocalization } from '../../localization/useLocalization'
import { useStaff } from '../../hooks/useStaff'

// Types
import { Employee, Contractor } from '../../types/staff'

interface SectionHeaderProps {
  icon: string;
  title: string;
  description?: string;
  onActionPress?: () => void;
  actionText?: string;
}

// Composant pour les headers de section
const SectionHeader: React.FC<SectionHeaderProps> = ({ 
  icon, 
  title, 
  description, 
  onActionPress, 
  actionText 
}) => {
  const { colors } = useTheme();
  return (
    <VStack gap="xs" style={{ marginBottom: DESIGN_TOKENS.spacing.md }}>
      <HStack gap="sm" align="center" justify="space-between">
        <HStack gap="sm" align="center" style={{ flex: 1 }}>
          <View style={{
            width: 32,
            height: 32,
            borderRadius: 16,
            backgroundColor: colors.primary + '20',
            justifyContent: 'center',
            alignItems: 'center'
          }}>
            <Text style={{ fontSize: 18, color: colors.primary }}>
              {icon}
            </Text>
          </View>
          <Text style={{
            fontSize: DESIGN_TOKENS.typography.subtitle.fontSize,
            fontWeight: '600',
            color: colors.text,
            flex: 1
          }}>
            {title}
          </Text>
        </HStack>
        {onActionPress && actionText && (
          <TouchableOpacity
            onPress={onActionPress}
            style={{
              backgroundColor: colors.primary,
              paddingHorizontal: DESIGN_TOKENS.spacing.md,
              paddingVertical: DESIGN_TOKENS.spacing.sm,
              borderRadius: DESIGN_TOKENS.radius.sm,
            }}
          >
            <Text style={{ 
              color: 'white', 
              fontSize: 14, 
              fontWeight: '600' 
            }}>
              {actionText}
            </Text>
          </TouchableOpacity>
        )}
      </HStack>
      {description && (
        <Text style={{
          fontSize: 14,
          color: colors.textSecondary,
          lineHeight: 20,
          marginLeft: 44, // Aligné avec le texte du titre
        }}>
          {description}
        </Text>
      )}
    </VStack>
  );
};

// Composant pour une carte employé
const EmployeeCard: React.FC<{ employee: Employee; onPress: () => void }> = ({ 
  employee, 
  onPress 
}) => {
  const { colors } = useTheme();
  
  return (
    <TouchableOpacity onPress={onPress}>
      <Card style={{ marginBottom: DESIGN_TOKENS.spacing.md }}>
        <VStack gap="sm">
          <HStack gap="md" align="center" justify="space-between">
            <VStack gap="xs" style={{ flex: 1 }}>
              <Text style={{
                fontSize: 16,
                fontWeight: '600',
                color: colors.text,
              }}>
                {employee.firstName} {employee.lastName}
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.textSecondary,
              }}>
                {employee.role} • {employee.team}
              </Text>
            </VStack>
            <View style={{
              backgroundColor: employee.status === 'active' ? '#10B981' + '20' : colors.textSecondary + '20',
              paddingHorizontal: DESIGN_TOKENS.spacing.sm,
              paddingVertical: DESIGN_TOKENS.spacing.xs,
              borderRadius: DESIGN_TOKENS.radius.sm,
            }}>
              <Text style={{
                fontSize: 12,
                fontWeight: '600',
                color: employee.status === 'active' ? '#10B981' : colors.textSecondary,
                textTransform: 'uppercase',
              }}>
                {employee.status}
              </Text>
            </View>
          </HStack>
          
          <HStack gap="lg" style={{ marginTop: DESIGN_TOKENS.spacing.xs }}>
            <VStack gap="xs" style={{ flex: 1 }}>
              <Text style={{
                fontSize: 12,
                color: colors.textSecondary,
                fontWeight: '500',
              }}>
                TFN
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.text,
              }}>
                {employee.tfn}
              </Text>
            </VStack>
            <VStack gap="xs" style={{ flex: 1 }}>
              <Text style={{
                fontSize: 12,
                color: colors.textSecondary,
                fontWeight: '500',
              }}>
                Hourly Rate
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.text,
                fontWeight: '600',
              }}>
                ${employee.hourlyRate}/hr
              </Text>
            </VStack>
          </HStack>
        </VStack>
      </Card>
    </TouchableOpacity>
  );
};

/**
 * Staff & Crew Management Screen
 * Displays and manages employees, their TFN, roles and teams
 */
export default function StaffCrewScreen() {
  const { t } = useLocalization()
  const commonStyles = useCommonThemedStyles()
  const { colors } = useTheme()

  // Données mockées pour l'exemple - Personnel de déménagement
  const initialMockEmployees: Employee[] = [
    {
      id: '1',
      firstName: 'John',
      lastName: 'Smith',
      tfn: '123-456-789',
      role: 'Moving Supervisor',
      team: 'Local Moving Team A',
      phone: '+61 412 345 678',
      email: 'john.smith@swift-removals.com.au',
      startDate: '2022-03-15',
      hourlyRate: 35,
      status: 'active'
    },
    {
      id: '2',
      firstName: 'Sarah',
      lastName: 'Johnson',
      tfn: '987-654-321',
      role: 'Senior Mover',
      team: 'Interstate Moving Team',
      phone: '+61 423 456 789',
      email: 'sarah.johnson@swift-removals.com.au',
      startDate: '2021-08-20',
      hourlyRate: 32,
      status: 'active'
    },
    {
      id: '3',
      firstName: 'Mike',
      lastName: 'Williams',
      tfn: '456-789-123',
      role: 'Packing Specialist',
      team: 'Local Moving Team A',
      phone: '+61 434 567 890',
      email: 'mike.williams@swift-removals.com.au',
      startDate: '2023-01-10',
      hourlyRate: 28,
      status: 'active'
    },
  ];

  // État local pour la gestion
  const [selectedTeam, setSelectedTeam] = useState<string>('all');
  const [isAddStaffModalVisible, setIsAddStaffModalVisible] = useState<boolean>(false);
  const [employees, setEmployees] = useState<Employee[]>(initialMockEmployees);

  const styles = StyleSheet.create({
    scrollContent: {
      flexGrow: 1,
      paddingHorizontal: DESIGN_TOKENS.spacing.lg,
      paddingVertical: DESIGN_TOKENS.spacing.md,
    },
    quickStats: {
      flexDirection: 'row',
      marginBottom: DESIGN_TOKENS.spacing.lg,
    },
    statCard: {
      flex: 1,
      marginHorizontal: DESIGN_TOKENS.spacing.xs,
    },
    statNumber: {
      fontSize: 24,
      fontWeight: '700',
      color: colors.primary,
      textAlign: 'center',
    },
    statLabel: {
      fontSize: 12,
      color: colors.textSecondary,
      textAlign: 'center',
      marginTop: DESIGN_TOKENS.spacing.xs,
    },
    teamFilterContainer: {
      flexDirection: 'row',
      marginBottom: DESIGN_TOKENS.spacing.lg,
    },
    teamFilter: {
      paddingHorizontal: DESIGN_TOKENS.spacing.md,
      paddingVertical: DESIGN_TOKENS.spacing.sm,
      borderRadius: DESIGN_TOKENS.radius.sm,
      marginRight: DESIGN_TOKENS.spacing.sm,
      borderWidth: 1,
    }
  })



  const teams = ['all', 'Local Moving Team A', 'Interstate Moving Team', 'Packing Team', 'Storage Team'];
  const filteredEmployees = selectedTeam === 'all' 
    ? employees 
    : employees.filter((emp: Employee) => emp.team === selectedTeam);

  const activeEmployees = employees.filter((emp: Employee) => emp.status === 'active').length;
  const totalTeams = new Set(employees.map((emp: Employee) => emp.team)).size;
  const averageRate = Math.round(employees.reduce((acc: number, emp: Employee) => acc + emp.hourlyRate, 0) / employees.length);

  const handleAddEmployee = () => {
    setIsAddStaffModalVisible(true);
  };

  const handleAddStaffSubmit = (newEmployeeData: any) => {
    // Générer un ID unique
    const newId = Math.max(...employees.map(emp => parseInt(emp.id))) + 1;
    
    const newEmployee: Employee = {
      id: newId.toString(),
      firstName: newEmployeeData.firstName,
      lastName: newEmployeeData.lastName,
      tfn: newEmployeeData.tfn,
      role: newEmployeeData.role,
      team: newEmployeeData.team,
      phone: newEmployeeData.phone,
      email: newEmployeeData.email,
      startDate: new Date().toISOString().split('T')[0],
      hourlyRate: parseInt(newEmployeeData.hourlyRate),
      status: 'active' as const,
    };

    // Ajouter le nouvel employé à la liste
    setEmployees(prev => [...prev, newEmployee]);
  };

  const handleEmployeePress = (employee: Employee) => {
    // TODO: Ouvrir détails de l'employé
    console.log('View employee details:', employee.id);
  };

  const handleTeamFilter = (team: string) => {
    setSelectedTeam(team);
  };

  return (
    <ScrollView 
      style={{ flex: 1 }}
      contentContainerStyle={styles.scrollContent}
      showsVerticalScrollIndicator={false}
    >
      {/* Statistiques rapides */}
      <View style={styles.quickStats}>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>{activeEmployees}</Text>
          <Text style={styles.statLabel}>Active Staff</Text>
        </Card>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>{totalTeams}</Text>
          <Text style={styles.statLabel}>Teams</Text>
        </Card>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>${averageRate}</Text>
          <Text style={styles.statLabel}>Avg Rate/hr</Text>
        </Card>
      </View>

      {/* Filtres par équipe */}
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={{ marginBottom: DESIGN_TOKENS.spacing.lg }}
      >
        <View style={styles.teamFilterContainer}>
          {teams.map((team) => (
            <TouchableOpacity
              key={team}
              style={[
                styles.teamFilter,
                {
                  backgroundColor: selectedTeam === team ? colors.primary + '20' : 'transparent',
                  borderColor: selectedTeam === team ? colors.primary : colors.border,
                }
              ]}
              onPress={() => handleTeamFilter(team)}
            >
              <Text style={{
                color: selectedTeam === team ? colors.primary : colors.textSecondary,
                fontWeight: selectedTeam === team ? '600' : '400',
                fontSize: 14,
              }}>
                {team === 'all' ? 'All Teams' : team}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>

      {/* Liste des employés */}
      <Card style={{ marginBottom: DESIGN_TOKENS.spacing.lg }}>
        <VStack gap="sm">
          <SectionHeader 
            icon="👥" 
            title="Staff Members"
            description="Manage your team members and their information"
            actionText="Add Staff"
            onActionPress={handleAddEmployee}
          />
          
          {filteredEmployees.map((employee) => (
            <EmployeeCard
              key={employee.id}
              employee={employee}
              onPress={() => handleEmployeePress(employee)}
            />
          ))}
        </VStack>
      </Card>

      {/* Modal Add Staff */}
      <AddStaffModal
        visible={isAddStaffModalVisible}
        onClose={() => setIsAddStaffModalVisible(false)}
        onSubmit={handleAddStaffSubmit}
      />
    </ScrollView>
  )
}