/**
 * TrucksScreen - Gestion compl√®te de la flotte de v√©hicules
 * Interface moderne avec statistiques, filtres et actions
 */
import React, { useState, useEffect } from 'react'
import { 
  ScrollView, 
  StyleSheet, 
  Text, 
  Pressable, 
  View, 
  ActivityIndicator,
  RefreshControl,
  Alert
} from 'react-native'
import { Ionicons } from '@expo/vector-icons'

// Components
import { HStack, VStack } from '../../components/primitives/Stack'
import { Card } from '../../components/ui/Card'
import AddVehicleModal, { VehicleCreateData } from '../../components/modals/AddVehicleModal'

// Hooks & Utils
import { DESIGN_TOKENS } from '../../constants/Styles'
import { useTheme } from '../../context/ThemeProvider'

// Types
interface Vehicle {
  id: string;
  name: string;
  type: 'moving-truck' | 'van' | 'trailer' | 'ute' | 'dolly' | 'tools';
  registration: string;
  make: string;
  model: string;
  year: number;
  status: 'available' | 'in-use' | 'maintenance' | 'out-of-service';
  nextService: string;
  location: string;
  capacity?: string;
  assignedTo?: string;
}

interface SectionHeaderProps {
  icon: string;
  title: string;
  description?: string;
  onActionPress?: () => void;
  actionText?: string;
}

// Composant pour les headers de section
const SectionHeader: React.FC<SectionHeaderProps> = ({ 
  icon, 
  title, 
  description, 
  onActionPress, 
  actionText 
}) => {
  const { colors } = useTheme();
  return (
    <VStack gap="xs" style={{ marginBottom: DESIGN_TOKENS.spacing.md }}>
      <HStack gap="sm" align="center" justify="space-between">
        <HStack gap="sm" align="center" style={{ flex: 1 }}>
          <View style={{
            width: 32,
            height: 32,
            borderRadius: 16,
            backgroundColor: colors.primary + '20',
            justifyContent: 'center',
            alignItems: 'center'
          }}>
            <Text style={{ fontSize: 18, color: colors.primary }}>
              {icon}
            </Text>
          </View>
          <Text style={{
            fontSize: DESIGN_TOKENS.typography.subtitle.fontSize,
            fontWeight: '600',
            color: colors.text,
            flex: 1
          }}>
            {title}
          </Text>
        </HStack>
        {onActionPress && actionText && (
          <TouchableOpacity
            onPress={onActionPress}
            style={{
              backgroundColor: colors.primary,
              paddingHorizontal: DESIGN_TOKENS.spacing.md,
              paddingVertical: DESIGN_TOKENS.spacing.sm,
              borderRadius: DESIGN_TOKENS.radius.sm,
            }}
          >
            <Text style={{ 
              color: 'white', 
              fontSize: 14, 
              fontWeight: '600' 
            }}>
              {actionText}
            </Text>
          </TouchableOpacity>
        )}
      </HStack>
      {description && (
        <Text style={{
          fontSize: 14,
          color: colors.textSecondary,
          lineHeight: 20,
          marginLeft: 44, // Align√© avec le texte du titre
        }}>
          {description}
        </Text>
      )}
    </VStack>
  );
};

// Fonction pour obtenir l'emoji selon le type de v√©hicule de d√©m√©nagement
const getVehicleEmoji = (type: Vehicle['type']): string => {
  const emojis = {
    'moving-truck': 'üöõ',
    'van': 'üöê',
    'trailer': 'üöú',
    'ute': 'üõª',
    'dolly': 'üõí',
    'tools': 'üîß'
  };
  return emojis[type] || 'üöõ';
};

// Fonction pour obtenir le label du type
const getTypeLabel = (type: Vehicle['type']): string => {
  const labels = {
    'moving-truck': 'Moving Truck',
    'van': 'Van',
    'trailer': 'Trailer',
    'ute': 'Ute',
    'dolly': 'Dolly',
    'tools': 'Tools'
  };
  return labels[type] || 'Vehicle';
};

// Fonction pour obtenir la couleur selon le statut
const getStatusColor = (status: Vehicle['status']): { bg: string; text: string } => {
  const colors = {
    available: { bg: '#10B981', text: '#10B981' },
    'in-use': { bg: '#F59E0B', text: '#F59E0B' },
    maintenance: { bg: '#EF4444', text: '#EF4444' },
    'out-of-service': { bg: '#6B7280', text: '#6B7280' }
  };
  return colors[status] || colors['out-of-service'];
};

// Fonction pour obtenir le label du statut
const getStatusLabel = (status: Vehicle['status']): string => {
  const labels = {
    available: 'Available',
    'in-use': 'In Use',
    maintenance: 'Maintenance',
    'out-of-service': 'Out of Service'
  };
  return labels[status] || 'Unknown';
};

// Composant pour une carte v√©hicule
const VehicleCard: React.FC<{ vehicle: Vehicle; onPress: () => void }> = ({ 
  vehicle, 
  onPress 
}) => {
  const { colors } = useTheme();
  const statusColors = getStatusColor(vehicle.status);
  
  return (
    <TouchableOpacity onPress={onPress}>
      <Card style={{ marginBottom: DESIGN_TOKENS.spacing.md }}>
        <VStack gap="sm">
          <HStack gap="md" align="center" justify="space-between">
            <HStack gap="md" align="center" style={{ flex: 1 }}>
              <View style={{
                width: 40,
                height: 40,
                borderRadius: 20,
                backgroundColor: colors.primary + '10',
                justifyContent: 'center',
                alignItems: 'center'
              }}>
                <Text style={{ fontSize: 20 }}>
                  {getVehicleEmoji(vehicle.type)}
                </Text>
              </View>
              <VStack gap="xs" style={{ flex: 1 }}>
                <Text style={{
                  fontSize: 16,
                  fontWeight: '600',
                  color: colors.text,
                }}>
                  {vehicle.name}
                </Text>
                <Text style={{
                  fontSize: 14,
                  color: colors.textSecondary,
                }}>
                  {vehicle.make} {vehicle.model} ({vehicle.year})
                </Text>
              </VStack>
            </HStack>
            <View style={{
              backgroundColor: statusColors.bg + '20',
              paddingHorizontal: DESIGN_TOKENS.spacing.sm,
              paddingVertical: DESIGN_TOKENS.spacing.xs,
              borderRadius: DESIGN_TOKENS.radius.sm,
            }}>
              <Text style={{
                fontSize: 12,
                fontWeight: '600',
                color: statusColors.text,
                textTransform: 'capitalize',
              }}>
                {vehicle.status.replace('-', ' ')}
              </Text>
            </View>
          </HStack>
          
          <HStack gap="lg" style={{ marginTop: DESIGN_TOKENS.spacing.xs }}>
            <VStack gap="xs" style={{ flex: 1 }}>
              <Text style={{
                fontSize: 12,
                color: colors.textSecondary,
                fontWeight: '500',
              }}>
                Registration
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.text,
              }}>
                {vehicle.registration}
              </Text>
            </VStack>
            <VStack gap="xs" style={{ flex: 1 }}>
              <Text style={{
                fontSize: 12,
                color: colors.textSecondary,
                fontWeight: '500',
              }}>
                Next Service
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.text,
              }}>
                {vehicle.nextService}
              </Text>
            </VStack>
          </HStack>
          
          {vehicle.assignedTo && (
            <HStack gap="md" style={{ marginTop: DESIGN_TOKENS.spacing.xs }}>
              <Text style={{
                fontSize: 12,
                color: colors.textSecondary,
                fontWeight: '500',
              }}>
                Assigned to:
              </Text>
              <Text style={{
                fontSize: 14,
                color: colors.primary,
                fontWeight: '600',
              }}>
                {vehicle.assignedTo}
              </Text>
            </HStack>
          )}
        </VStack>
      </Card>
    </TouchableOpacity>
  );
};

/**
 * Vehicles & Equipment Management Screen
 * Displays and manages company vehicles, equipment and maintenance
 */
export default function TrucksScreen() {
  const { t } = useLocalization()
  const commonStyles = useCommonThemedStyles()
  const { colors } = useTheme()

  // √âtat local pour la gestion
  const [selectedType, setSelectedType] = useState<string>('all');

  const styles = StyleSheet.create({
    scrollContent: {
      flexGrow: 1,
      paddingHorizontal: DESIGN_TOKENS.spacing.lg,
      paddingVertical: DESIGN_TOKENS.spacing.md,
    },
    quickStats: {
      flexDirection: 'row',
      marginBottom: DESIGN_TOKENS.spacing.lg,
    },
    statCard: {
      flex: 1,
      marginHorizontal: DESIGN_TOKENS.spacing.xs,
    },
    statNumber: {
      fontSize: 24,
      fontWeight: '700',
      color: colors.primary,
      textAlign: 'center',
    },
    statLabel: {
      fontSize: 12,
      color: colors.textSecondary,
      textAlign: 'center',
      marginTop: DESIGN_TOKENS.spacing.xs,
    },
    typeFilterContainer: {
      flexDirection: 'row',
      marginBottom: DESIGN_TOKENS.spacing.lg,
    },
    typeFilter: {
      paddingHorizontal: DESIGN_TOKENS.spacing.md,
      paddingVertical: DESIGN_TOKENS.spacing.sm,
      borderRadius: DESIGN_TOKENS.radius.sm,
      marginRight: DESIGN_TOKENS.spacing.sm,
      borderWidth: 1,
    }
  })

  // Donn√©es mock√©es pour l'exemple - Flotte de d√©m√©nagement
  const mockVehicles: Vehicle[] = [
    {
      id: '1',
      name: 'Moving Truck #1',
      type: 'moving-truck',
      registration: 'MVT-123',
      make: 'Isuzu',
      model: 'NPR 200',
      year: 2022,
      status: 'available',
      nextService: '15 Nov 2024',
      location: 'Main Depot',
    },
    {
      id: '2',
      name: 'Delivery Van',
      type: 'van',
      registration: 'VAN-789',
      make: 'Ford',
      model: 'Transit',
      year: 2021,
      status: 'in-use',
      nextService: '28 Oct 2024',
      location: 'En route to Bondi',
      assignedTo: 'John Smith'
    },
    {
      id: '3',
      name: 'Furniture Trailer',
      type: 'trailer',
      registration: 'TLR-456',
      make: 'Custom',
      model: 'Box Trailer 6x4',
      year: 2020,
      status: 'maintenance',
      nextService: '02 Nov 2024',
      location: 'Service Center',
    },
    {
      id: '4',
      name: 'Pickup Ute',
      type: 'ute',
      registration: 'UTE-001',
      make: 'Toyota',
      model: 'HiLux',
      year: 2023,
      status: 'available',
      nextService: '20 Dec 2024',
      location: 'Equipment Yard',
    },
  ];

  const vehicleTypes = ['all', 'moving-truck', 'van', 'trailer', 'ute', 'dolly', 'tools'];
  const filteredVehicles = selectedType === 'all' 
    ? mockVehicles 
    : mockVehicles.filter(vehicle => vehicle.type === selectedType);

  const availableVehicles = mockVehicles.filter(v => v.status === 'available').length;
  const inUseVehicles = mockVehicles.filter(v => v.status === 'in-use').length;
  const maintenanceVehicles = mockVehicles.filter(v => v.status === 'maintenance').length;

  const handleAddVehicle = () => {
    // TODO: Ouvrir modal d'ajout de v√©hicule
    console.log('Add new vehicle');
  };

  const handleVehiclePress = (vehicle: Vehicle) => {
    // TODO: Ouvrir d√©tails du v√©hicule
    console.log('View vehicle details:', vehicle.id);
  };

  const handleTypeFilter = (type: string) => {
    setSelectedType(type);
  };

  return (
    <ScrollView 
      style={{ flex: 1 }}
      contentContainerStyle={styles.scrollContent}
      showsVerticalScrollIndicator={false}
    >
      {/* Statistiques rapides */}
      <View style={styles.quickStats}>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>{availableVehicles}</Text>
          <Text style={styles.statLabel}>Available</Text>
        </Card>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>{inUseVehicles}</Text>
          <Text style={styles.statLabel}>In Use</Text>
        </Card>
        <Card style={styles.statCard}>
          <Text style={styles.statNumber}>{maintenanceVehicles}</Text>
          <Text style={styles.statLabel}>Maintenance</Text>
        </Card>
      </View>

      {/* Filtres par type */}
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={{ marginBottom: DESIGN_TOKENS.spacing.lg }}
      >
        <View style={styles.typeFilterContainer}>
          {vehicleTypes.map((type) => (
            <TouchableOpacity
              key={type}
              style={[
                styles.typeFilter,
                {
                  backgroundColor: selectedType === type ? colors.primary + '20' : 'transparent',
                  borderColor: selectedType === type ? colors.primary : colors.border,
                }
              ]}
              onPress={() => handleTypeFilter(type)}
            >
              <Text style={{
                color: selectedType === type ? colors.primary : colors.textSecondary,
                fontWeight: selectedType === type ? '600' : '400',
                fontSize: 14,
              }}>
                {type === 'all' ? 'All Vehicles' : `${getVehicleEmoji(type as Vehicle['type'])} ${type.charAt(0).toUpperCase() + type.slice(1)}`}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>

      {/* Liste des v√©hicules */}
      <Card style={{ marginBottom: DESIGN_TOKENS.spacing.lg }}>
        <VStack gap="sm">
          <SectionHeader 
            icon="üöõ" 
            title="Vehicles & Equipment"
            description="Manage your fleet, equipment and maintenance schedules"
            actionText="Add Vehicle"
            onActionPress={handleAddVehicle}
          />
          
          {filteredVehicles.map((vehicle) => (
            <VehicleCard
              key={vehicle.id}
              vehicle={vehicle}
              onPress={() => handleVehiclePress(vehicle)}
            />
          ))}
        </VStack>
      </Card>
    </ScrollView>
  )
}